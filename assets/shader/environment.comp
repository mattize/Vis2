#version 450 core

layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0) uniform sampler2D lb;
layout(binding = 1) uniform sampler2D ldb;

layout(rgba32f, binding = 2) uniform imageCube results;

layout(binding = 3) uniform EnvUniformBufferObject {
    mat4 inverseViewMatrix;
	vec3 middleOfPlaneVSOpp;
	float planeWidth;
	float planeHeight;
	vec2 planeSides;
	mat4 dir0;
	mat4 dir1;
	mat4 dir2;
	mat4 dir3;
	mat4 dir4;
	mat4 dir5;
	float boxSize;
} ubo;


vec3 intersectPlane(vec3 n, vec3 p0, vec3 r, vec3 r0, out float t)
{
	float d = dot(n, r);
	if (d < 1e-6) {
		t = 0;
		return r0;
	}
	t = dot((p0-r0), n) / d;	

	return r0 + r * t;
}

void main() {

	mat4 inverseViewMatrix = ubo.inverseViewMatrix;
	vec3 middleOfPlaneVSOpp = ubo.middleOfPlaneVSOpp;
	float planeWidth = ubo.planeWidth;
	float planeHeight = ubo.planeHeight;
	vec2 planeSides = ubo.planeSides;
	mat4 dir0 = ubo.dir0;
	mat4 dir1 = ubo.dir1;
	mat4 dir2 = ubo.dir2;
	mat4 dir3 = ubo.dir3;
	mat4 dir4 = ubo.dir4;
	mat4 dir5 = ubo.dir5;
	float boxSize = ubo.boxSize;
  
  ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);  
  float t;
  vec3 pixelPos = vec3(inverseViewMatrix * vec4(middleOfPlaneVSOpp + vec3(-planeSides.x + pixel_coords.x/(planeWidth), -planeSides.y + pixel_coords.y/(planeHeight), 0), 1.0));
  
    
  vec4 light = texture(lb, pixel_coords.xy);
  vec3 lightdir = normalize(mat3(inverseViewMatrix) * texture(ldb, pixel_coords.xy).xyz);
  
    
  vec3 posXIntersect = intersectPlane(
		vec3(1.0,0.0,0.0),
		vec3(boxSize/2.0, 0, 0),
		lightdir,
		pixelPos,
		t
	);
	vec4 pos = vec4(0);	
	if (t != 0) {
		pos = dir0 * vec4(posXIntersect, 1);	
		ivec3 coords = ivec3(planeWidth /2+ planeWidth*pos.xy/boxSize, 0);
		vec4 prev = imageLoad(results, coords);
		imageStore(results,coords, light+prev);
	}
			
	vec3 negXIntersect = intersectPlane(
		vec3(-1.0,0.0,0.0),
		vec3(-boxSize/2.0, 0, 0),
		lightdir,
		pixelPos,
		t
	);	
	if (t != 0) {
		pos = dir1 * vec4(negXIntersect, 1);	
		ivec3 coords = ivec3(planeWidth /2+ planeWidth*pos.xy/boxSize, 1);
		vec4 prev = imageLoad(results, coords);
		imageStore(results, coords, light+prev);
	}

	vec3 posYIntersect = intersectPlane(
		vec3(0.0,1.0,0.0),
		vec3(0.0,boxSize/2.0, 0),
		lightdir,
		pixelPos,
		t
	);	
	if (t != 0) {
		pos = dir2 * vec4(posYIntersect, 1);	
		ivec3 coords = ivec3(planeWidth /2+ planeWidth*pos.xy/boxSize, 2);
		vec4 prev = imageLoad(results, coords);
		imageStore(results, coords, light + prev);
	}

	vec3 negYIntersect = intersectPlane(
		vec3(0.0,-1.0,0.0),
		vec3(0.0,-boxSize/2.0, 0),
		lightdir,
		pixelPos,
		t
	);	
	if (t != 0) {
		pos = dir3 * vec4(negYIntersect, 1);	
		ivec3 coords = ivec3(planeWidth /2+ planeWidth*pos.xy/boxSize, 3);
		vec4 prev = imageLoad(results, coords);
		imageStore(results, coords, light + prev);
	}
	
	vec3 posZIntersect = intersectPlane(
		vec3(0,0,1.0),
		vec3(0, 0, boxSize/2.0),
		lightdir,
		pixelPos,
		t
	);
	
	if (t != 0) {
		pos = dir4 * vec4(posZIntersect, 1);
		ivec3 coords = ivec3(planeWidth /2+ planeWidth*pos.xy/boxSize, 4);
		vec4 prev = imageLoad(results, coords);
		imageStore(results, coords, light + prev);
	}
					
	vec3 negZIntersect = intersectPlane(
		vec3(0,0,-1.0),
		vec3(0, 0, -boxSize/2.0),
		lightdir,
		pixelPos,
		t
	);
	
	if (t != 0) {
		pos = dir5 * vec4(negZIntersect, 1);
		ivec3 coords = ivec3(planeWidth /2+ planeWidth*pos.xy/boxSize, 5);
		vec4 prev = imageLoad(results, coords);
		imageStore(results, coords, light + prev);
	}
}