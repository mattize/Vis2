#version 450 core

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 1) uniform AlgoUniformBufferObject {
    mat4 inverseViewMatrix;
    mat4 viewMatrix;
    vec3 lightVSPos;
    vec3 lightColor;
    float planeDistance;
    vec3 middleOfPlaneVS;
    float sphereRadius;
    vec2 planeSides;
    ivec2 dims;
    vec3 refractionPos;
    vec4 refractionValue;
    float voxelDepth;
    float planeWidth;
    float planeHeight;
} ubo;

layout(rgba32f, binding = 2) uniform image2D vpb_a;
layout(rgba32f, binding = 3) uniform image2D vdb_a;
layout(rgba32f, binding = 4) uniform image2D lb_a;
layout(rgba32f, binding = 5) uniform image2D ldb_a;
layout(rgba32f, binding = 6) uniform image2D cb_a;
layout(rgba32f, binding = 7) uniform image2D mb_a;
layout(rgba32f, binding = 8) uniform image2D vpb_b;
layout(rgba32f, binding = 9) uniform image2D vdb_b;
layout(rgba32f, binding = 10) uniform image2D lb_b;
layout(rgba32f, binding = 11) uniform image2D ldb_b;
layout(rgba32f, binding = 12) uniform image2D cb_b;
layout(rgba32f, binding = 13) uniform image2D mb_b;

//layout(rgba32f, binding = 6) uniform imageCube env;

void main() {
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy); 
  vec3 size = vec3(ubo.planeSides/0.5, 1);
  vec3 pixelPos = ubo.middleOfPlaneVS + vec3(-0.5 + pixel_coords.x/ubo.planeWidth, -0.5 + pixel_coords.y/ubo.planeHeight, 0) * size;
  
  if (gl_GlobalInvocationID.z == 0) {
	imageStore(vpb_a, pixel_coords, vec4(pixelPos,1.0));
	imageStore(vdb_a, pixel_coords, vec4(0.0,0.0,-1.0, 0.0));
	imageStore(lb_a, pixel_coords, vec4(ubo.lightColor, 1.0));
	imageStore(ldb_a, pixel_coords, vec4(normalize(ubo.middleOfPlaneVS-ubo.lightVSPos), 0.0));
	imageStore(mb_a, pixel_coords, vec4(1.0));
	imageStore(cb_a, pixel_coords, vec4(0.0));
  } else {
	imageStore(vpb_b, pixel_coords, vec4(pixelPos,1.0));
	imageStore(vdb_b, pixel_coords, vec4(0.0,0.0,-1.0, 0.0));
	imageStore(lb_b, pixel_coords, vec4(ubo.lightColor, 1.0));
	imageStore(ldb_b, pixel_coords, vec4(normalize(ubo.middleOfPlaneVS-ubo.lightVSPos), 0.0));
	imageStore(mb_b, pixel_coords, vec4(1.0));
	imageStore(cb_b, pixel_coords, vec4(0.0));
  }
  
  //imageStore(env, ivec3(pixel_coords.xy, pixel_coords.z * 3), vec4(0.0));
  //imageStore(env, ivec3(pixel_coords.xy, pixel_coords.z * 3 + 1), vec4(0.0));
  //imageStore(env, ivec3(pixel_coords.xy, pixel_coords.z * 3 + 2), vec4(0.0));
}


  

 
